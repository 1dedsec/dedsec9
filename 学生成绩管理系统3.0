/***************************************
**文件名：project No.7
**创建人：王佐文
**日期：2020.11.2
**修改人：王佐文
**日期：2020.11.2
**描述：学生成绩管理系统，通过键盘输入学生成绩数据与姓名，再进行管理排序与查找
*****************************************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define STUDENT_MAX   30
#define NAME_MAX   20
#define SUBJECT_MAX  6
int  Readscore(int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int *subject);
void Printscore(int num[],int score[][SUBJECT_MAX],int n,char name[][NAME_MAX],int subject);
void Caculate_course(int num[],int score[][SUBJECT_MAX],int n,int subject);
void Caculate_students(int num[],int score[][SUBJECT_MAX],int n,int subject);
void Sort(int num[],int score[][SUBJECT_MAX],int (*compare)(int a,int b,int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int subject),int n,char name[][NAME_MAX],int subject);
int Ascending_score(int a,int b,int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int subject);
int Descending_score(int a,int b,int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int subject);
int Ascending_num(int a,int b,int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int subject);
int Diction_name(int a,int b,int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int subject);
void Search(int num[],int score[][SUBJECT_MAX],int n,char name[][NAME_MAX],int subject);
void Search_name(int num[],int score[][SUBJECT_MAX],int n,char name[][NAME_MAX],int subject);
void Analysis(int num[],int score[][SUBJECT_MAX],int n,int subject);


/*************************************************
**输入：ret,n,students,flag1,flag2，score[][],num[]，name[][]
**ret:检查用户输入是否为非法字符
**n:读入用户从键盘输入数字
**students:学生人数
**flag1:用于判断何时退出主函数
**flag2:用于判断在执行管理操作前是否已经录入完毕学生成绩
**score:用于储存学生成绩
**num:用于储存学生学号
**name:用于储存学生姓名
**输出：无
**功能描述：通过用户输入数字执行各种操作，对学生成绩进行管理
**调用模块：Readscore函数，Printscore函数,Caculate函数，Sort函数，Ascending_score函数，Descending_score函数，Ascending_num函数，Diction_name函数，Search函数，Search_name函数，Analysis函数
****************************************************/


int main()
{
    int ret,n,students,flag1 = 0,flag2 = 0,subject;
    int score[STUDENT_MAX][SUBJECT_MAX]= {0},num[STUDENT_MAX]= {0};
    char name[STUDENT_MAX][NAME_MAX];
    while(flag1 == 0)
    {
        printf("1.Input record\n"
               "2.List record\n"
               "3.Calculate total and average score of  every course\n"
               "4.Calculate total and average score of  every student\n"
               "5.Sort in descending order by total score of every student\n"
               "6.Sort in ascending order by total score of every student\n"
               "7.Sort in ascending order by StudentID\n"
               "8.sort in dictionary order by name\n"
               "9.Search by Students ID\n"
               "10.Search by name\n"
               "11.Statistic analysis for every course\n"
               "0.Exit\n"
               "Please enter your choice\n");
        ret = scanf("%d",&n);
        if(ret != 1)
        {
            while(getchar() != '\n');   /*检查输入是否为非法字符*/
            printf("1.Input record\n"
                   "2.List record\n"
                   "3.Calculate total and average score of  every course\n"
                   "4.Calculate total and average score of  every student\n"
                   "5.Sort in descending order by total score of every student\n"
                   "6.Sort in ascending order by total score of every student\n"
                   "7.Sort in ascending order by StudentID\n"
                   "8.sort in dictionary order by name\n"
                   "9.Search by Students ID\n"
                   "10.Search by name\n"
                   "11.Statistic analysis for every course\n"
                   "0.Exit\n"
                   "Please enter your choice\n");
            ret = scanf("%d",&n);
        }
        switch(n)
        {
        case 1:
            students = Readscore(num,score,name,&subject);
            flag2 = 1;    /*置flag2值为1，若其不为1，则后面的操作均无法进行并报错*/
            break;
        case 2:
            if(flag2 !=0)
            {
                Printscore(num,score,students,name,subject);
            }
            break;
        case 3:
            if(flag2 != 0)
            {
                Caculate_course(num,score,students,subject);
            }
            break;
        case 4:
            if(flag2 != 0)
            {
                Caculate_students(num,score,students,subject);
            }
            break;
        case 5:
            if(flag2 != 0)
            {
                Sort(num,score,Descending_score,students,name,subject);
            }
            break;
        case 6:
            if(flag2 != 0)
            {
                Sort(num,score,Ascending_score,students,name,subject);
            }
            break;
        case 7:
            if(flag2 != 0)
            {
                Sort(num,score,Ascending_num,students,name,subject);
            }
            break;
        case 8:
            if(flag2 != 0)
            {
                Sort(num,score,Diction_name,students,name,subject);
            }
            break;
        case 9:
            if(flag2 != 0)
            {
                Search(num,score,students,name,subject);
            }
            break;
        case 10:
            if(flag2 != 0)
            {
                Search_name(num,score,students,name,subject);
            }
            break;
        case 11:
            if(flag2!=0)
            {
                Analysis(num,score,students,subject);
            }
            break;
        case 0:
            flag1 = 1;
            break;
        default:
            printf("Wrong input!\n");
            break;
        }
        printf("\n");
        if(flag2 == 0)
        {
            printf("Haven't read!!\n");
        }
    }
    return 0;
}


/*******************************************
**函数名：Readscore
**输入：num[],score[][]，name[][]
**num:储存学生学号
**score：储存学生成绩
**name:储存学生姓名
**输出：n
**n：学生总人数
**功能描述：从键盘输入学生成绩、姓名和学号，并存储在数组中
*********************************************/



int Readscore(int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int *subject)
{
    int n,m,i,j;
    do
    {
        printf("How many students in total?");
        scanf("%d",&n);
    }
    while(n<1 || n>30);      /*判断学生人数是否正确*/
    do
    {
        printf("How many subjects in total?");
        scanf("%d",&m);
    }
    while(m<1 || m>6);
    for(i=0; i<n; i++)
    {
        printf("Input No.%d student's ID,name :",i+1);
        scanf("%d%s",&num[i],name[i]);
        for(j=0; j<m; j++)
        {
            printf("Input the score of his/her subject%d:",j+1);
            scanf("%d",&score[i][j]);
        }
    }
    *subject = m;
    return n;
}

/******************************************
**函数名：Printscore
**输入：num[],score[][]，n，name[][],subject
**num:储存学生学号
**score：储存学生成绩
**n:学生人数
**name:学生姓名
**subject:学科数目
**输出：无
**功能描述：依据输入顺序重新打印出学生成绩、姓名和学号
******************************************/


void Printscore(int num[],int score[][SUBJECT_MAX],int n,char name[][NAME_MAX],int subject)
{
    int i,j,k,sum;
    printf("Student's ID,name and score are:\n"  /*空格为了和下面的数据对齐*/
           "number    name      ");
    for(j=0; j<subject; j++)
    {
        printf("subject%d  ",j+1);
    }
    printf("sum       average   ");
    printf("\n");
    for(i=0; i<n; i++)
    {
        sum = 0;
        printf("%-10d%-10s",num[i],name[i]);
        for(k=0; k<subject; k++)
        {
            printf("%-10d",score[i][k]);
            sum = sum+score[i][k];
        }
        printf("%-10d%-10.2f",sum,(float)sum/subject);
        printf("\n");
    }
}

/********************************************
**函数名：Caculate
**输入：num[],score[][]，n
**num:储存学生学号
**score：储存学生成绩
**n:学生人数
**subject:学科数目
**输出：无
**函数功能：计算出每门课总成绩和平均分，打印出来
********************************************/

void Caculate_course(int num[],int score[][SUBJECT_MAX],int n,int subject)
{
    int i,j,sum=0;
    for(i=0; i<subject; i++)
    {
        sum = 0;
        for(j=0; j<n; j++)
        {
            sum=sum+score[j][i];
        }
        printf("total score of subjectNo.%d is:%d,average is %.2f\n",i+1,sum,(float)sum/n);
    }
}

/********************************************
**函数名：Caculate_students
**输入：num[],score[][]，n
**num:储存学生学号
**score：储存学生成绩
**n:学生人数
**subject:学科数目
**输出：无
**函数功能：计算出每个学生总成绩和平均分，打印出来
********************************************/

void Caculate_students(int num[],int score[][SUBJECT_MAX],int n,int subject)
{
    int i,j,sum=0;
    for(i=0; i<n; i++)
    {
        sum = 0;
        for(j=0; j<subject; j++)
        {
            sum=sum+score[i][j];
        }
        printf("total score of studentNo.%d is:%d,average is %.2f\n",i+1,sum,(float)sum/subject);
    }
}
/*******************************************
**函数名：Sort
**输入：num[],score[][]，（*compare）(int a,int b，int num[],int score[],char name[][NAME_MAX],int subject),n，name[][]
**num:储存学生学号
**score：储存学生成绩
**n:学生人数
**name:学生姓名
**(*compare)(int a,int b,int num[],int score[],char name[][NAME_MAX],int subject:用于判断升序或降序
**subject:学科数目
**输出：无
**函数功能：按升序或降序对总成绩或姓名或学号进行排序，连带学号一起打印出来
*********************************************/


void Sort(int num[],int score[][SUBJECT_MAX],int (*compare)(int a,int b,int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int subject),int n,char name[][NAME_MAX],int subject)
{
    int a[n];           /*负责存储排序后的角标排序*/
    int i,j,k,temp;
    for(i=0; i<n; i++)
    {
        a[i] = i;
    }
    for(i=0; i<n-1; i++)     /*依次遍历，每一次找到最 小/大 的数据的角标并放于最前面*/
    {
        for(j=i+1; j<n; j++)
        {
            if((*compare)(a[j],a[i],num,score,name,subject) > 0)    /*由于字符串比较会返回正数，所以统一判断正负*/
            {
                temp = a[j];     /*交换a[i],a[j]内存储的角标*/
                a[j] = a[i];
                a[i] = temp;
            }
        }
    }
    printf("After sorting:\n"
           "Student's ID,name and score are:\n"
           "number    name      ");
    for(j=0; j<subject; j++)
    {
        printf("subject%d  ",j+1);
    }
    printf("\n");
    for(i=0; i<n; i++)
    {
        printf("%-10d%-10s",num[a[i]],name[a[i]]);/*按a数组内存储的角标顺序打印出顺序*/
        for(k=0; k<subject; k++)
        {
            printf("%-10d",score[a[i]][k]);
        }
        printf("\n");
    }
}
int Ascending_score(int a,int b,int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int subject)
{
    int i,sum1=0,sum2=0;
    for(i=0; i<subject; i++)
    {
        sum1 = sum1 + score[a][i];
        sum2 = sum2 + score[b][i];
    }
    return sum1<sum2;
}
int Descending_score(int a,int b,int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int subject)
{
    int i,sum1=0,sum2=0;
    for(i=0; i<subject; i++)
    {
        sum1 = sum1 + score[a][i];
        sum2 = sum2 + score[b][i];
    }
    return sum1>sum2;
}
int Ascending_num(int a,int b,int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int subject)
{
    return num[a]<num[b];
}
int Diction_name(int a,int b,int num[],int score[][SUBJECT_MAX],char name[][NAME_MAX],int subject)
{
    return strcmp(name[b],name[a]);
}

/******************************************
**函数名：Search
**输入：num[],score[][]，n，Snum,find，subject
**num:储存学生学号
**score：储存学生成绩
**n:学生人数
**name:学生姓名
**counter:记录学生排名
**Snum:储存用户要查找的学号
**find:判断是否找到，若找到则不为-1，若未找到则为-1
**subject:学科数目
**输出：无
**函数功能：根据用户输入学号查找对应学号学生的成绩，并打出其排名
********************************************/


void Search(int num[],int score[][SUBJECT_MAX],int n,char name[][NAME_MAX],int subject)
{
    int Snum,i,find = 0;
    int low = 0,high = n-1,mid,pos = -1;    /*二分查找法先把low置于开头，把high置于末尾*/
    printf("Please input the ID you want to search:");
    scanf("%d",&Snum);
    while(!find&&low <= high)   /*若没找到且low小于high则继续进行查找*/
    {
        mid = low + (high - low)/2;   /*把mid置于中心*/
        if(Snum > num[mid])   /*开始判断，若大于mid则low角标前移，若小于mid则high角标后移，若相等则找到*/
        {
            low = mid + 1;
        }
        else if (Snum < num[mid])
        {
            high = mid - 1;
        }
        else
        {
            pos = mid;  /*将mid的角标传给pos*/
            find = 1;
        }
    }
    if(find == 0)
    {
        printf("Are you in this school???");
    }
    else
    {
        for(i=0; i<subject; i++)
            printf("Your score of subjectNo.%d is %d\n",i+1,score[pos][i]);
    }
}

/******************************************
**函数名：Search_name
**输入：num[],score[][]，n,Sname,flag,subject
**num:储存学生学号
**score：储存学生成绩
**n:学生人数
**name:学生姓名
**Snum:储存用户要查找的学号
**flag:判断是否找到，若找到则不为-1，若未找到则为-1
**subject:学科数目
**输出：无
**函数功能：根据用户输入姓名查找对应学号学生的成绩，并打出其排名
********************************************/


void Search_name(int num[],int score[][SUBJECT_MAX],int n,char name[][NAME_MAX],int subject)
{
    int i,j,flag = -1;
    char Sname[NAME_MAX];
    printf("Please input the your name:");
    scanf("%s",Sname);
    for(i=0; i<n; i++)
    {
        if(strcmp(Sname,name[i]) == 0)   /*如果相等则返回0值，代表找到*/
        {
            flag = i;   /*将角标赋给flag*/
        }
    }
    if(flag == -1)
    {
        printf("No Found!!!");
    }
    else
    {
        for(j=0; j<subject; j++)
            printf("your score of subjectNo.%d is %d\n",j+1,score[flag][j]);
    }
}

/********************************************
**函数名：Analysis
**输入：num[],score[][]，n,subject
**num:储存学生学号
**score：储存学生成绩
**n:学生人数
**subject:学科数目
**输出：无
**函数功能：找到优秀、良好，正常，及格，不及格分别的人数，并求出每个类别在总人数中的占比
**********************************************/


void Analysis(int num[],int score[][SUBJECT_MAX],int n,int subject)
{
    int perfect,good,normal,pass,notpass;
    int i,j;
    for(i=0; i<subject; i++)              /*分别记录各个分段的人数*/
    {
        perfect=0;good=0;normal=0;pass=0;notpass=0;
        for(j=0;j<n;j++)
            if(score[j][i]>90&&score[j][i]<=100)
            {
                perfect++;
            }
            else if(score[j][i]>80&&score[j][i]<=90)
            {
                good++;
            }
            else if(score[j][i]>70&&score[j][i]<=80)
            {
                normal++;
            }
            else if(score[j][i]>=60&&score[j][i]<=70)
            {
                pass++;
            }
            else
            {
                notpass++;
            }
        printf("for subjectNo.%d\n",i+1);
        printf("perfect are %d people, for %.2f%%\n",perfect,(float)perfect/n*100);
        printf("good are %d people, for %.2f%%\n",good,(float)good/n*100);
        printf("normal are %d people, for %.2f%%\n",normal,(float)normal/n*100);
        printf("pass are %d people, for %.2f%%\n",pass,(float)pass/n*100);
        printf("notpass are %d people, for %.2f%%\n",notpass,(float)notpass/n*100);
    }
}

